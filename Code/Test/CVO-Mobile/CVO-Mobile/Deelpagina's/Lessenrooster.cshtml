@{
    Layout = "~/Shared/_Layout.cshtml";
    Page.Title = "Lessenrooster";

    Session["Page"] = "6";

    string action = "";

    Session["loginError"] = "";
    if (IsPost)
    {
        action = Request["action"];

        switch (action)
        {
            case "login":
                if (Session["cursist"] == null)
                {
                    try
                    {

                        Session["cursist"] = Administratix.Model.Cursist.Login(Request["Login-CursistNummer"]);
                    }
                    catch (Exception e)
                    {

                        Session["loginError"] = e.Message;
                    }

                }
                break;

            case "logout":
                Session["cursist"] = null;
                break;

        }
    }

    if (Session["cursist"] == null)
    {
        Response.Redirect("~/Deelpagina's/Default.cshtml");
    }


    if (IsPost)
    {
        action = Request["action"];

        switch (action)
        {
            case "feestdagen-inclusief":
                Administratix.BLL.Lessenrooster.FeestdagenTonen = true;
                break;

            case "feestdagen-exclusief":
                Administratix.BLL.Lessenrooster.FeestdagenTonen = false;
                break;

            default:
                break;
        }
    }

    System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo("nl-BE");

    Administratix.BLL.Lessenrooster lessenrooster = new Administratix.BLL.Lessenrooster();
    if (Session["cursist"] != null)
    {
        Administratix.BLL.Cursist cursist = (Administratix.BLL.Cursist)Session["cursist"];
        //lessenrooster = Administratix.Model.LesDavinci.LesroosterTonen(Convert.ToInt32(cursistNr));

        //start datum rooster
        DateTime startDatum = DateTime.Now;

        //startdatum overwrite voor voorstelling
        startDatum = new DateTime(2015, 1, 1);

        //datum na juli -> einde schooljaar = volgend jaar, anders dit jaar
        int jaar = startDatum.Month > 7 ? startDatum.Year + 1 : startDatum.Year;
        DateTime eindDatum = new DateTime(jaar, 8, 1);

        lessenrooster.Lesdagen = Administratix.Model.LesDavinci.LesDavinciSelectAllByCursistNummerAndDates(cursist.CursistNummer, startDatum, eindDatum);
        if (Administratix.BLL.Lessenrooster.FeestdagenTonen)
        {
            lessenrooster.VoegFeestdagenToe(Administratix.Model.Kalender.KalenderSelectAllByDates(startDatum, eindDatum));
        }

    }

}


<form id="lessenrooster-display" action="" method="post" class="containerBig containerOptions">

    <div class="containerOption">
        <div class="containerTitle">Feestdagen</div>
        <button type="submit" name="action" value="feestdagen-exclusief" class="optionButton @(Administratix.BLL.Lessenrooster.FeestdagenTonen ? "" : "optionSelected")">Verbergen</button>
        <button type="submit" name="action" value="feestdagen-inclusief" class="optionButton @(Administratix.BLL.Lessenrooster.FeestdagenTonen ? "optionSelected" : "")">Tonen</button>

    </div>

</form>


@for (int i = 0; i < lessenrooster.Lesdagen.Count; i++)
{
    Administratix.BLL.LesDavinci les = lessenrooster.Lesdagen[i];
    <div class="itemBox roosterBox" id="@i">
        <a class="itemTitle" href="#@i">

            <div class="roosterDatum">
                @les.Datum.ToString("dd-MM-yyyy", culture)
            </div>
            @if (les.Docent == null)
            {
                <img class="iconCenter img_Vakantie" />
            }
            else
            {
                <div class="roosterTijd">
                    @les.Aanvangsdatum.ToString("HH:mm", culture) - @les.Einddatum.ToString("HH:mm", culture)
                </div>
            }
            <div class="roosterModule">
                @les.Module
            </div>
        </a>
        @if (les.Docent != null)
        {
            <div class="itemContent rooster">
                <div class="itemContentText rooster">
                    Cursusnummer: @les.Cursusnummer
                </div>
                <div class="itemContentText rooster">
                    Lokaal: @les.Lokaal
                </div>
                <div class="itemContentText rooster">
                    Docent: @les.Docent
                </div>
                <div class="itemContentText rooster">
                    Campus: @les.Campus
                </div>
            </div>
        }
    </div>
}
