@{
    string token = "";
    int cursistId = -1;
    string email = "";
    string action = "none";
    TimeSpan requestTime = new TimeSpan();
    Moodle.DAL.MoodlePackage.MoodleURL = "moodle-cvomobile.rhcloud.com";

    List<Moodle.BLL.Course> _enrolledCourses = new List<Moodle.BLL.Course>();
    List<Moodle.BLL.Deadline> _upcommingDeadlines = new List<Moodle.BLL.Deadline>();
    Moodle.BLL.Deadline _deadlineOnDate = new Moodle.BLL.Deadline();

    if (IsPost)
    {
        action = Request["action"];

        if (action.Equals("viewing"))
        {
            DateTime start = DateTime.Now;

            int cursistNummer = Convert.ToInt32(Request["search-cursistnummer"]);

            email = Administratix.Model.Cursist.GetEmailByCursistNummer(cursistNummer);
            
            token = Moodle.DAL.Token.RequestTokenForService("cvomobile", "Boerderijm1n#s", "mobile");
            cursistId = Moodle.DAL.User.GetUserIdByEmail(token, email);

            if (cursistId != -1)
            {

                // Get all courses the student is enrolled in
                _enrolledCourses = Moodle.DAL.Course.GetUserEnrolledCourses(token, cursistId);
                
                foreach (Moodle.BLL.Course _course in _enrolledCourses)
                {
                    // Get all assignments of a course
                    _course.Assignments = Moodle.DAL.Assignment.GetAllAssingmentInCourse(token, _course.Id);


                    foreach (Moodle.BLL.Assignment _assing in _course.Assignments)
                    {
                        // Add name of course for dealines
                        _assing.CourseName = _course.FullName;

                        // Get the score of the student for the assignment
                        double score = Moodle.Model.GetGradeOfStudentForAssignment(token, _assing.Id, cursistId);
                        if (score == -1)
                        {
                            _assing.UserScore = "--";
                        }
                        _assing.UserScore = "" + score;
                    }
                }

                _upcommingDeadlines = Moodle.Model.GetDeadlinesInTimespan(_enrolledCourses, DateTime.Now, 14);
                _deadlineOnDate = Moodle.Model.GetDeadlinesInTimespan(_enrolledCourses, new DateTime(2015, 5, 13), 1).First();
            }
            DateTime end = DateTime.Now;

            requestTime = end - start;
        }
        
    }

}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <link href="~/App_Themes/TempTest.css" rel="stylesheet" />
</head>
<body>

    <form id="viewing" method="post" action="">
        <fieldset>
            <legend>Bekijk je deadlines en punten</legend>
            <div>
                <label for="name-insert">
                    Cursistnummer
                </label>
                <input type="text" name="search-cursistnummer" id="cursist-Cursistnummer" />
            </div>
            <div>
                <button type="submit" name="action" value="viewing">Zoek</button>
            </div>
        </fieldset>
    </form>

    <div>
        Action: @action
    </div>
    <div>
        Token: @token
    </div>
    @if (action == "viewing")
    {
        <div>
            requestTime: @requestTime
        </div>


        if (@cursistId == -1)
        {
            <div>
                Geen cursist gevonden met het volgende email adress: @email
            </div>
        }
        else
        {
            <div>
                CursistId: @cursistId
            </div>

    

            <div>
                <div class="moodleCourse">
                    Deadlines voor specifieke dag (13/5)

                    <div class="moodleAssignment">
                        @String.Format("{0:d/M/yyyy}", _deadlineOnDate.Date.Date)
                        @foreach (Moodle.BLL.Assignment assignment in _deadlineOnDate.Assignments)
                    {
                            <div class="moodleGrade">
                                @assignment.CourseName : @assignment.Name<br />
                            </div>
                    }
                    </div>
                </div>
            </div>

            <div>
                <div class="moodleCourse">
                    Deadlines voor de komende 2 weken
                    @foreach (Moodle.BLL.Deadline deadline in _upcommingDeadlines)
                {
                        <div class="moodleAssignment">
                            @String.Format("{0:d/M/yyyy}", deadline.Date.Date)
                            @foreach (Moodle.BLL.Assignment assignment in deadline.Assignments)
                        {
                                <div class="moodleGrade">
                                    @assignment.CourseName : @assignment.Name<br />
                                </div>
                        }
                        </div>
                }
                </div>
            </div>

            <div>
                @foreach (Moodle.BLL.Course course in _enrolledCourses)
            {
                    <div class="moodleCourse">
                        @course.FullName

                        @foreach (Moodle.BLL.Assignment assign in course.Assignments)
                    {
                            <div class="moodleAssignment">
                                @assign.Name<br />
                                Deadline: @String.Format("{0:d/M/yyyy HH:mm}", assign.DueDate)<br />

                                <div class="moodleGrade">
                                    Score: @assign.UserScore / @assign.MaxGrade
                                </div>
                            </div>
                    }
                    </div>
            }

                
                
            </div>
    }}
        </body>
    </html>
